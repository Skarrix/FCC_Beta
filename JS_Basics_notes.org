7 Data Types:
  - undefined
  - null
  - boolean
  - string
  - symbol
  - number
  - object

Variables: store and manipulate data dynamically.
          - Done through using a "label" to point to data rather than data itself.
          - Any of the 7 data types can be stored in variable.
          - Similar to x/y in math, except they can store different values at different times.
          - declared via 'var' infront
          - made up of letters, numbers, _, $, no spaces, cannot start with #

Assignment operator: store value in variable with =
                    - goes right -> left

Initialize variable to initial value on same line it is created
  Ex. var thisVar = 19;
When first declared, initial value is 'undefined'
  - math operation on undefined results NaN (Not a Number)

camelCase: first letter sentence, every word thereafter capitalised

Mathematical operations:
  - +, -, *, /
  - increment: ++   Ex. i++; is equiv to i = i+1;
  - decrement: --
  - remainder: % remainder of division of two numbers. Ex. 17 % 2 = 1
            - Usage: # can be checked to see if even or odd by % 2
            - similar to 'modulus' operator which does not work properly with neg numbers

Decimal numbers: aka 'floating point' or 'floats'

Assignment+operations in one step:
  - +=       Ex. myVar += 1; adds 1
  - -=
  - *=
  - /=

Escaping a string: can use ".." inside of string ".."'s if use \.
                   Ex. sampleStr = "Alan said, \"Peter is learning\".";
                   \ prevents JS from seeing " as end of string.
Other escapable characters:
  - \'
  - \"
  - \\  backslash
  - \n  newline
  - \r  carriage return
  - \t  tab
  - \b  backspace
  - \  form feed
  Why use?
    - allows use of characters you can't otherwise type out, ex. backspace
    - multiple quotes in string

'concatenation' operator: when + operator used with string value.
                          build new strings out of other strings = concatenating them.
    - += concatenates string onto end of existing string var. for breaking long string over several lines.
    - + insert one or more vars into a string
can also append vars to string using +=

.length property: expresses how long string is.

Bracket notation []:
  - way to find character at specific index. JS 0-indexed.   Ex. firstName[0]
  - can perform other functions inside bracket. Ex. firstName[firstname.length-1]

String values 'immutable' in JS. aka can't be altered once created.

'array' variable: store several pieces of data in one place.  Ex. sandwich ["peanut butter", "jelly", "bread"]
  - data in array accessed through indexes. bracket notation specifies entry in array. Ex. array = [50, 60, 70] where array[0]=50
  - array entries mutable.  Ex. for 'ourArray[50, 60, 70];' 'ourArray[0] = 15;' changes to 'ourArray[15, 60, 70]'

Multi-dimensional Array: aka nested array, ex. [["bulls", 23], "Cows", 45]]
  - array of arrays. when using brackets to access array, first set refers to first level (outer) array, each additional bracket pair refers to next level of entries inside.
    Ex. var arr = [
        [1,2,3]
        [4,5,6]
        [7,8,9]
        [[10,11,12], 13,14]
      ];
     Where
      arr[3];  // [[10,11,12],13,14]
      arr[3][0];  // [10,11,12]
      arr[3][0][1]; // 11

.push(): function to append data to end of array. takes 'parameters' and pushes onto end of array.
  Ex. var arr = [1,2,3]; arr.push(4); // arr now [1,2,3,4]
.pop(): function to "pop" value off end of array. popped off value can be stored by assigning to var.
  aka. .pop() removes last element from array and returns that element.
    Ex.
      var threeArr = [1,4,6];
      var oneDown = threeArr.pop();
      console.log(oneDown); // returns 6
      console.log(threeArr); // returns [1,4]
.shift(): removes first element from array
.unshift(): adds elements to front of array. works like .push() only for front instead of back.
